---
published: true
layout: post
title: Monolithic Serverless? WTF?
date: 2018-07-26T09:00:00.000Z
tags:
  - API Evangelist
  - Design
  - Serverless
  - Politics of APIs
image: >-
  https://s3.amazonaws.com/kinlane-productions/algo-rotoscope/stories/statue-face-open-mouth_blue_circuit_5.png
---
<p><img src="{{ page.image }}" width="45%" align="right" style="padding: 15px;" /></p>While writing about [the discussions I've been having with folks around using monorepos to manage microservices](http://apievangelist.com/2018/07/09/concerns-around-managing-many-microservice-repositories-and-going-with-a-mono-repo/), [I came across this post about whether or not people should be using a single monolithic Lambda function or multiple lambda functions with the AWS API Gateway](https://medium.com/statics-and-dynamics/should-i-use-a-single-monolithic-lambda-function-or-multiple-lambda-functions-with-api-gateway-d99b0230f1e7). Again, surprising me about how lazy people are, and how difficult it is for people to think about things in a decoupled way. Which I think is the reason many people will go back to doing monolithic applications, and fail at microservices, not because it technically won't work, it is just because it will be perceived as more work, and with a lack of imagination around how to work in a distributed way, people will give up.

First, I do not think microservices is a good idea for all applications. Second, I don't always subscribe to microservices meaning small or micro. I think a service mindset is good, and it is healthy to decouple, and reduce the surface area of your services, minimizing dependencies, but there are many situations where a super small microservice will be a bad idea. However, if you are going to do serverless microservices with Lambda and AWS API Gateway, I do not understand why you'd want a single monolithic function behind many different API paths. I'm guessing that people who think you should do monolithic serverless haven't thought about sensible organization of their functions, and orchestration of them using the AWS CLI or API. They are managing them through the AWS dashboard and are thinking, _"man this is a lot of work, let's just do a single function, with the routing built in."_

Similar to folks thinking a monorepo is a good idea over many different repos, without ever thinking about organizations using Github organizations, and orchestration using Git and the Github API, people aren't getting creative with their Lamdba functions. People seem to be in love with brainstorming and dreaming about decoupled approaches to doing APIs, but when it comes to the hard work of actually doing it, and having an imagination when it comes to orchestration and reducing friction, people would rather just give up. I'm not 100% sold on serverless being the right use case for driving APIs, but I can tell you one thing, that having many different APIs with a single Lambda function behind it will not give you the granularity you need for understanding the performance, and functionality behind each API and service you are delivering--you are just going to create new problems that you won't have the visibility into to be able to optimize.

I'm reading a lot about microservices backlash lately. I'm guessing after about 1-2 more years of serverless, we will start seeing serverless backlash. While some of this backlash will be about folks using microservices and serverless for use cases that didn't make sense, I'm guessing a significant amount will be because people can't decouple their imagination, and think through the necessary organization and orchestration required to think about doing distributed applications at scale. Without it, they are going to fumble, struggle, and see decoupling as all about making extra work for themselves, and go back to the way they were doing things before. In my experience these folks are always on the hunt for easy solutions to their complex problems, and when you aren't willing to invest the time into doing it right, and properly understanding all the moving parts, you are going to fail, and revert to what you know. The problem with this, is I'm guessing you are going to also fall prey to the next trend, and not have the capacity to understand what it is all about before going all in, yet again.
