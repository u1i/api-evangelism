---
published: true
layout: post
title: My GraphQL Thoughts After Almost Two Years
date: 2018-04-16T09:00:00.000Z
tags:
  - API Evangelist
  - GraphQL
  - Deployment
  - Politics of APIs
image: >-
  http://kinlane-productions.s3.amazonaws.com/algorotoscope/builder/filtered/16_38_600_500_0_max_1_0_-2.jpg
---
<p><img src="{{ page.image }}" width="45%" align="right" style="padding: 15px;" /></p>It has been almost a year and half since I first wrote [my post questioning that GraphQL folks didn't want to do the hard work of API design](http://apievangelist.com/2016/08/30/graphql-seems-like-we-do-not-want-to-do-the-hard-work-of-api-design/), which I also [clarified that I was keeping my mind open regarding the approach](http://apievangelist.com/2016/09/02/i-am-keeping-my-mind-open-and-looking-forward-to-learning-more-about-graphql/) to delivering APIs. I've covered several GraphQL implementations since then, as well as my post [on waiting the GraphQL assault out](http://apievangelist.com/2017/09/05/just-waiting-the-graphql-assault-out/)-to which I received a stupid amount of, "dude you just don't get it!", and "why you gotta be so mean?" responses.

**GraphQL Is A Tool In My Toolbox**<br />
I'll start with my official stance on GraphQL. [It is a tool in my API toolbox](https://apievangelist.com/2018/02/03/api-is-not-just-rest/). When evaluating projects, and making recommendations regarding what technology to use, it exists alongside REST, Hypermedia, gRPC, Server-Sent Events (SSE), Websockets, Kafka, and other tools. I'm actively discussing the options with my clients, helping them understand the pros and cons of each approach, and working to help them define their client use cases, and when it makes sense I'm recommending a query language layer like GraphQL. When there are a large number of data points, and a knowledgeable, known group of developers being targeted for building web, mobile, and other client applications, it can make sense. I'm finding GraphQL to be a great option to augment a full stack of web APIs, and in many cases a streaming API, and other event-driven architectural considerations.

**GraphQL Does Not Replace REST**<br />
Despite what many of the pundits and startups would like to be able to convince everyone of, GraphQL will not replace REST. Sorry, it doesn't reach as wide of an audience as REST does, and it still keeps APIs in the database, and data literate club. It does make some very complex things simpler, but it also makes some very simple things more complex. I've reviewed almost 5 brand new GraphQL APIs lately where the on-boarding time was in the 1-2 hour range, rather than minutes with many other more RESTful APIs. GraphQL augments RESTful approaches, and in some cases it can replace them, but it will not entirely do away with the simplicity of REST. Sorry, I know you don't want to understand the benefits REST brings to the table, and desperately want there to be a one size fits all solution, but it just isn't the reality on the ground. Insisting that GraphQL will replace REST does everyone more harm than good, hurts the overall API community, and will impede GraphQL adoption--regardless of what you want to believe.

**The GraphQL Should Embrace The Web**<br />
One of my biggest concerns around the future of GraphQL is its lack of a focus on the web. If you want to see the adoption you envision, it has to be bigger than Facebook, Apollo, and the handful of cornerstone implementations like Github, Pinterest, and others. If you want to convert others into being believers, then propose the query language to become part of the web, and improve web caching so that it rises to the level of the promises being made about GraphQL. I know underneath the Facebook umbrella of GraphQL and React it seems like everything revolves around you, but there really is a bigger world out there. There are more mountains to conquer, and Facebook won't be around forever. To many of the folks I'm trying to educate about GraphQL, they can't help but see the shadow of Facebook, and their lack of respect for the web. GraphQL may move fast, and break some things, but it won't have the longevity all y'all believe so passionately in, if you don't change your tune. I've been doing this 30 years now, and seen a lot of technology come and go. My recommendation is to embrace the web, bake GraphQL into what is already happening, and we'll all be better off for it.

**GraphQL Does Not Do What OpenAPI Does**<br />
I hear a lot of pushback on my OpenAPI work, telling me that GraphQL does everything that OpenAPI does, and more! No, no it doesn't. By saying that you are declaring that you don't have a clue what OpenAPI does, and that you are just pushing a trend, and have very little interest in the viability of the APIs I'm building, or my client's needs. There is an overlap in what GraphQL delivers, and what OpenAPI does, but they both have their advantages, and honestly OpenAPI has a lot more tooling, adoption, and enjoys a diverse community of support. I know in your bubble that GraphQL and React dominates the landscape, but on my landscape it is just a blip, and there are other tools in the toolbox to consider. Along with the web, the GraphQL should be embracing the OpenAPI community, understanding the overlap, and reaching out to the OAI to help define the GraphQL layer for the specification. Both communities would benefit from this work, rather than trying to replace something you don't actually understand.

**GraphQL Dogma Continues To Get In The Way**<br />
I am writing this post because I had another GraphQL believer mess up my chances for it being in the roadmap, because of their overzealous beliefs, and allowing dogma to drive their contribution to the conversation. This is the 3rd time I've had this happen on high profile projects, and while the GraphQL conversation hasn't been ruled out, it has been slowed, pushed back, and taken off the table, due to pushing the topic in unnecessary ways. The conversation unfortunately wasn't about why GraphQL was a good option, the conversations was dominated by GraphQL being THE SOLUTION, and how it was going to fix everything web service and API that came before it. This combined with inadequate questions regarding IP concerns conveyed, and GraphQL being a "Facebook solution", set back the conversations. In each of these situations I stepped in to help regulate the conversations, and answer questions, but the damage was already done, and leadership was turned off to the concept of GraphQL because of overzealous, dogmatic beliefs in this relevant technology. Which brings me back to why I'm pushing back on GraphQL, not because I do not get the value it brings, but because the rhetoric around how it is being sold and pushed.

**No, I Do Get What GraphQL Does**<br />
This post will result in the usual number of Tweets, DMs, and emails telling me I just don't get GraphQL. I do. I've installed and played with it, and hacked against several implementations. I get it. It makes sense. I see why folks feel like it is useful. The database guy in me gets why it is a viable solution. It has a place in the API toolbox. However, the rhetoric around it is preventing me from putting it to use in some relevant projects. You don't need to convince me of its usefulness. I see it. I'm also not interested in convincing y'all of the merits of REST, Hypermedia, gRPC, or the other tools in the toolbox. I'm interested in applying the tools as part of my work, and the tone around GraphQL over the last year or more hasn't been helping the cause. So, please don't tell me I don't get what GraphQL does, I do. I don't think y'all get the big picture of the API space, and how to help ensure GraphQL is in it for the long haul, and achieving the big picture adoption y'all envision.

**Let's Tone Down The Rhetoric**<br />
I'm writing about this because the GraphQL rhetoric got in my way recently. I'm still waiting out the GraphQL assault. I'm not looking to get on the bandwagon, or argue with the GraphQL cult, I'm just looking to deliver on the projects I'm working on. I don't need to be schooled on the benefits of GraphQL, and what the future will hold. I'm just looking to get business done, and support the needs of my clients. I know that the whole aggressive trends stuff works in Silicon Valley, and the startup community. But in government, and some of the financial, insurance, and healthcare spaces I've been putting GraphQL on the table, the aggressive rhetoric isn't working. It is working against the adoption of the query language. Honestly it isn't just the rhetoric, I don't feel the community is doing enough to satisfy the wider IP, and Facebook connection to help make the sale. Anyways, I'm just looking to vent, and push back on the rhetoric aound GraphQL replacing REST. After a year and a half I'm convinced of the utility of GraphQL, however the wider tooling, and messaging around it still hasn't won me over.
